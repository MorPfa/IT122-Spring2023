<html>
<head>
    <title>React App Demo</title>

    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>

<body>

<div id="root"></div>
<script type="text/babel">

    const items = <%- items %>;

    // define other components

    const CarList = (props) => {
      return (
        <div>
          <h3>List of cars:</h3>
          <ul>
            {props.cars.map((item) => (
              <li key={item._id}>
                <span>{item.manufacturer}</span>
                <button type="button" onClick={() => props.handleEdit(item)}>
                  Edit
                </button>
              </li>
            ))}
          </ul>
        </div>
      );
    }

    class CarForm extends React.Component {
      constructor(props) {
        super(props);
        this.state = {
          manufacturer: '',
          horsepower: '',
          model: '',
          trimModel: '',
          cars: [],
          selectedCar: null,
        };
      }

      componentDidMount() {
        this.loadCars();
      }

      loadCars = async () => {
        try {
          const response = await fetch('/api/cars');
          if (response.ok) {
            const data = await response.json();
            this.setState({ cars: data });
          } else {
            console.error('Failed to load cars.');
          }
        } catch (err) {
          console.error(err);
        }
      }

      handleInputChange = (event) => {
        const { name, value } = event.target;
        this.setState({ [name]: value });
      }

      handleEdit = (item) => {
        this.setState({
          manufacturer: item.manufacturer,
          horsepower: item.horsepower ? item.horsepower.toString() : '',
          model: item.model,
          trimModel: item.trimModel,
          selectedCar: item,
        });
      }

      handleSubmit = async (event) => {
        event.preventDefault();
        const { manufacturer, horsepower, model, trimModel, selectedCar } = this.state;

        try {
          let response;
          if (selectedCar) {
            // Update existing car
            response = await fetch(`/api/cars/${selectedCar._id}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                manufacturer,
                horsepower: parseInt(horsepower),
                model,
                trimModel,
              }),
            });
          } else {
            // Create new car
            response = await fetch('/api/cars', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                manufacturer,
                horsepower: parseInt(horsepower),
                model,
                trimModel,
              }),
            });
          }

          if (response.ok) {
            this.loadCars();
            this.handleClear();
          } else {
            console.error('Failed to save item.');
          }
        } catch (err) {
          console.error(err);
        }
      }

      handleDelete = async () => {
  const { selectedCar } = this.state;
  if (selectedCar) {
    try {
      const response = await fetch(`/api/cars/${selectedCar._id}`, {
        method: 'DELETE',
      });
      if (response.ok) {
        this.loadCars();
        this.handleClear();
      } else {
        console.error('Failed to delete item.');
      }
    } catch (err) {
      console.error(err);
    }
  }
}

      handleClear = () => {
        this.setState({
          manufacturer: '',
          horsepower: '',
          model: '',
          trimModel: '',
          selectedCar: null,
        });
      }

      render() {
        const { manufacturer, horsepower, model, trimModel, cars, selectedCar } = this.state;
        return (
          <div>
            <form onSubmit={this.handleSubmit}>
              <label>
                Manufacturer:
                <input
                  type="text"
                  name="manufacturer"
                  value={manufacturer}
                  onChange={this.handleInputChange}
                />
              </label>
              <br />
              <label>
                Horsepower:
                <input
                  type="text"
                  name="horsepower"
                  value={horsepower}
                  onChange={this.handleInputChange}
                />
              </label>
              <br />
              <label>
                Model:
                <input
                  type="text"
                  name="model"
                  value={model}
                  onChange={this.handleInputChange}
                />
              </label>
              <br />
              <label>
                Trim Model:
                <input
                  type="text"
                  name="trimModel"
                  value={trimModel}
                  onChange={this.handleInputChange}
                />
              </label>
              <br />
              <button type="submit">Save</button>
              <button type="button" onClick={this.handleDelete} disabled={!selectedCar}>Delete</button>
              <button type="button" onClick={this.handleClear}>Clear</button>
            </form>
            <CarList cars={cars} handleEdit={this.handleEdit} />
          </div>
        );
      }
    }

    const App = () => {
      return (
        <div>
          <h2>Cars</h2>
          <CarForm />
        </div>
      );
    }

    ReactDOM.render(<App />, document.getElementById('root'));
</script>
</body>
</html>
